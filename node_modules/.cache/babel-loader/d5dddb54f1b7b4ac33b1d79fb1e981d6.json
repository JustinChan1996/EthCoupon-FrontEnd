{"ast":null,"code":"import Web3 from 'web3';\nexport function hello() {\n  alert('hello');\n}\nexport async function getPromotion(contractInstance, account) {\n  return new Promise(function (resolve, reject) {\n    var codeArray = [];\n    contractInstance.getPastEvents('Promotion', {\n      filter: {\n        sponsorAddress: account\n      },\n      // Using an array means OR: e.g. 20 or 23\n      fromBlock: 0,\n      toBlock: 'latest'\n    }, function (error, events) {\n      console.log(events);\n\n      if (events.length > 0) {\n        // console.log(events[0].returnValues); \n        for (var i = 0; i < events.length; i++) {\n          // Get promotional balance for all of them\n          console.log(events[i].returnValues[\"couponCode\"]);\n          var res = GetPromotionBalance(contractInstance, account, events[i].returnValues[\"couponCode\"]); // console.log(res);\n\n          events[i].returnValues[\"Balance\"] = res.leftOver;\n          events[i].returnValues[\"unspentEther\"] = res.unspentEther; // console.log(events[i].returnValues);\n\n          codeArray.push(events[i].returnValues); // codeArray.push([events[i].returnValues.couponCode,events[i].returnValues.sponsorAddress,new Date(events[i].returnValues.dateCreated*1000),events[i].returnValues.targetAddress,Web3.utils.fromWei(events[i].returnValues.totalEth,\"ether\"),Web3.utils.fromWei(events[i].returnValues.amtPerAddress,\"ether\"),Web3.utils.fromWei(events[i].returnValues.minRedeemAmt,\"ether\"),Web3.utils.fromWei(events[i].returnValues.maxRedeemAmt,\"ether\"),new Date(events[i].returnValues.startDate*1000),new Date(events[i].returnValues.endDate*1000)]);\n        }\n\n        resolve(codeArray);\n      }\n    }).then(function (events) {});\n  });\n}\nexport function getPromotionForCouponHash(contractInstance, hash) {\n  return new Promise(function (resolve, reject) {\n    var codeArray = [];\n    contractInstance.getPastEvents('Promotion', {\n      filter: {\n        couponHash: hash\n      },\n      // Using an array means OR: e.g. 20 or 23\n      fromBlock: 0,\n      toBlock: 'latest'\n    }, function (error, events) {\n      console.log(events);\n\n      if (events.length > 0) {\n        // console.log(events[0].returnValues); \n        // for(var i=0;i<events.length;i++){\n        codeArray.push(events[0].returnValues); // }\n\n        resolve(codeArray);\n      }\n    }).then(function (events) {});\n  });\n}\nexport function getRedeem(contractInstance, account) {\n  return new Promise(function (resolve, reject) {\n    var codeArray = [];\n    contractInstance.getPastEvents('Redeem', {\n      filter: {\n        user: account\n      },\n      // Using an array means OR: e.g. 20 or 23\n      fromBlock: 0,\n      toBlock: 'latest'\n    }, function (error, events) {\n      console.log(events);\n\n      if (events.length > 0) {\n        // console.log(events[0].returnValues);\n        for (var i = 0; i < events.length; i++) {\n          codeArray.push(events[i].returnValues);\n        }\n\n        resolve(codeArray);\n      }\n    }).then(function (events) {});\n  });\n}\nexport async function getRedeemCouponInfo(contractInstance, account) {\n  // return new Promise(function(resolve, reject) {\n  var redeems = await getRedeem(contractInstance, account);\n\n  for (var i = 0; i < redeems.length; i++) {\n    var couponInfo = await getPromotionForCouponHash(contractInstance, redeems[i][0]); // append promotion code,target account, starting date, ending date, amount redemmed, min coupon txn amount and max coupon txn amount\n\n    console.log(couponInfo);\n\n    if (couponInfo.length > 0) {\n      redeems[i][\"couponCode\"] = couponInfo[0].couponCode;\n      redeems[i][\"startDate\"] = couponInfo[0].startDate;\n      redeems[i][\"endDate\"] = couponInfo[0].endDate;\n      redeems[i][\"endDate\"] = couponInfo[0].endDate;\n      redeems[i][\"amtPerAddress\"] = couponInfo[0].amtPerAddress;\n      redeems[i][\"minRedeemAmt\"] = couponInfo[0].minRedeemAmt;\n      redeems[i][\"maxRedeemAmt\"] = couponInfo[0].maxRedeemAmt;\n      redeems[i][\"targetAddress\"] = couponInfo[0].targetAddress;\n    }\n  }\n\n  return redeems;\n}\nexport async function GetPromotionBalance(contractInstance, account, promoCode) {\n  return new Promise(function (resolve, reject) {\n    // var details = await contractInstance.checkPromotionalBalance.call(promoCode,{from: account});\n    // console.log(details);\n    // // return resolve(details);\n    // return details;\n    contractInstance.methods.checkPromotionalBalance(promoCode).call({\n      from: account\n    }).then(function (result) {\n      // console.log(result);\n      return resolve(result);\n    });\n  });\n}\n_c = GetPromotionBalance;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetPromotionBalance\");","map":{"version":3,"sources":["/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/helper.js"],"names":["Web3","hello","alert","getPromotion","contractInstance","account","Promise","resolve","reject","codeArray","getPastEvents","filter","sponsorAddress","fromBlock","toBlock","error","events","console","log","length","i","returnValues","res","GetPromotionBalance","leftOver","unspentEther","push","then","getPromotionForCouponHash","hash","couponHash","getRedeem","user","getRedeemCouponInfo","redeems","couponInfo","couponCode","startDate","endDate","amtPerAddress","minRedeemAmt","maxRedeemAmt","targetAddress","promoCode","methods","checkPromotionalBalance","call","from","result"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\n\nexport function hello(){\n    alert('hello');\n}\n\nexport async function getPromotion(contractInstance,account){\n    return new Promise(function(resolve, reject) {\n        var codeArray = [];\n        contractInstance.getPastEvents('Promotion', {\n            filter: {sponsorAddress:account}, // Using an array means OR: e.g. 20 or 23\n            fromBlock: 0,\n            toBlock: 'latest'\n        }, function(error, events){\n          console.log(events);\n          if(events.length > 0){\n            // console.log(events[0].returnValues); \n            for(var i=0;i<events.length;i++){\n              \n              // Get promotional balance for all of them\n              console.log(events[i].returnValues[\"couponCode\"]);\n              var res = GetPromotionBalance(contractInstance,account,events[i].returnValues[\"couponCode\"]);\n              // console.log(res);\n              events[i].returnValues[\"Balance\"] = res.leftOver;\n              events[i].returnValues[\"unspentEther\"] = res.unspentEther;\n              // console.log(events[i].returnValues);\n              codeArray.push(events[i].returnValues);\n              // codeArray.push([events[i].returnValues.couponCode,events[i].returnValues.sponsorAddress,new Date(events[i].returnValues.dateCreated*1000),events[i].returnValues.targetAddress,Web3.utils.fromWei(events[i].returnValues.totalEth,\"ether\"),Web3.utils.fromWei(events[i].returnValues.amtPerAddress,\"ether\"),Web3.utils.fromWei(events[i].returnValues.minRedeemAmt,\"ether\"),Web3.utils.fromWei(events[i].returnValues.maxRedeemAmt,\"ether\"),new Date(events[i].returnValues.startDate*1000),new Date(events[i].returnValues.endDate*1000)]);\n            }\n            resolve(codeArray);            \n          }\n          })\n        .then(function(events){\n        });\n    });\n}\n\nexport function getPromotionForCouponHash(contractInstance,hash){\n  return new Promise(function(resolve, reject) {\n      var codeArray = [];\n      contractInstance.getPastEvents('Promotion', {\n          filter: {couponHash:hash}, // Using an array means OR: e.g. 20 or 23\n          fromBlock: 0,\n          toBlock: 'latest'\n      }, function(error, events){\n        console.log(events);\n        if(events.length > 0){\n          // console.log(events[0].returnValues); \n          // for(var i=0;i<events.length;i++){\n            codeArray.push(events[0].returnValues);\n          // }\n          resolve(codeArray);            \n        }\n        })\n      .then(function(events){\n      });\n  });\n}\n\n\nexport function getRedeem(contractInstance,account){\n    return new Promise(function(resolve, reject) {\n        var codeArray = [];\n        contractInstance.getPastEvents('Redeem', {\n            filter: {user:account}, // Using an array means OR: e.g. 20 or 23\n            fromBlock: 0,\n            toBlock: 'latest'\n        }, function(error, events){\n          console.log(events);\n          if(events.length > 0){\n            // console.log(events[0].returnValues);\n            for(var i=0;i<events.length;i++){\n              codeArray.push(events[i].returnValues);\n            } \n            resolve(codeArray);            \n          }\n          })\n        .then(function(events){\n        });\n    });\n}\n\nexport async function getRedeemCouponInfo(contractInstance,account){\n    // return new Promise(function(resolve, reject) {\n\n      var redeems = await getRedeem(contractInstance,account);\n      for(var i=0;i<redeems.length;i++){\n        var couponInfo = await getPromotionForCouponHash(contractInstance,redeems[i][0]);\n        // append promotion code,target account, starting date, ending date, amount redemmed, min coupon txn amount and max coupon txn amount\n        console.log(couponInfo)\n        if(couponInfo.length > 0){\n          redeems[i][\"couponCode\"] = couponInfo[0].couponCode;\n          redeems[i][\"startDate\"] = couponInfo[0].startDate;\n          redeems[i][\"endDate\"] = couponInfo[0].endDate;\n          redeems[i][\"endDate\"] = couponInfo[0].endDate;\n          redeems[i][\"amtPerAddress\"] = couponInfo[0].amtPerAddress;\n          redeems[i][\"minRedeemAmt\"] = couponInfo[0].minRedeemAmt;\n          redeems[i][\"maxRedeemAmt\"] = couponInfo[0].maxRedeemAmt;\n          redeems[i][\"targetAddress\"] = couponInfo[0].targetAddress;\n        }\n      }\n      return redeems;\n}\n\nexport async function GetPromotionBalance(contractInstance,account,promoCode){\n   return new Promise(function(resolve, reject) {\n    // var details = await contractInstance.checkPromotionalBalance.call(promoCode,{from: account});\n    // console.log(details);\n    // // return resolve(details);\n    // return details;\n    contractInstance.methods.checkPromotionalBalance(promoCode).call({from: account})\n    .then(function(result){\n        // console.log(result);\n        return(resolve(result));\n    });\n   });\n\n}\n\n"]},"metadata":{},"sourceType":"module"}