[{"/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/index.js":"1","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/reportWebVitals.js":"2","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/App.js":"3","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/myCoupon.js":"4","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/home.js":"5","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/ABI.js":"6","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/helper.js":"7","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/table.js":"8","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/RedeemTable.js":"9"},{"size":500,"mtime":1637505445044,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1637505445045,"results":"12","hashOfConfig":"11"},{"size":14340,"mtime":1638023829129,"results":"13","hashOfConfig":"11"},{"size":4633,"mtime":1638023029485,"results":"14","hashOfConfig":"11"},{"size":0,"mtime":1637595926961,"results":"15","hashOfConfig":"11"},{"size":8113,"mtime":1638022911143,"results":"16","hashOfConfig":"11"},{"size":6775,"mtime":1637940029943,"results":"17","hashOfConfig":"11"},{"size":8119,"mtime":1638002140197,"results":"18","hashOfConfig":"11"},{"size":7586,"mtime":1638002616747,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ebns18",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/index.js",[],["42","43"],"/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/reportWebVitals.js",[],"/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/App.js",["44","45","46","47","48","49","50","51","52","53","54","55","56","57","58"],"/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/myCoupon.js",["59","60","61","62","63","64","65"],"/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/home.js",[],"/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/ABI.js",[],"/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/helper.js",["66"],"import Web3 from 'web3'\n\nexport function hello(){\n    alert('hello');\n}\n\nexport function getPromotion(contractInstance,account){\n    return new Promise(function(resolve, reject) {\n        var codeArray = [];\n        contractInstance.getPastEvents('Promotion', {\n            filter: {sponsorAddress:account}, // Using an array means OR: e.g. 20 or 23\n            fromBlock: 0,\n            toBlock: 'latest'\n        }, function(error, events){\n          console.log(events);\n          if(events.length > 0){\n            // console.log(events[0].returnValues); \n            for(var i=0;i<events.length;i++){\n              \n              // Get promotional balance for all of them\n              // console.log(events[i].returnValues[\"couponCode\"]);\n              // var res = await GetPromotionBalance(contractInstance,account,events[i].returnValues[\"couponCode\"]);\n              // console.log(\"Balance is \" + res.leftOver);\n              // events[i].returnValues.Balance = res.leftOver;\n              // events[i].returnValues.unspentEther = res.unspentEther;\n              // console.log(events[i].returnValues);\n              codeArray.push(events[i].returnValues);\n              // codeArray.push([events[i].returnValues.couponCode,events[i].returnValues.sponsorAddress,new Date(events[i].returnValues.dateCreated*1000),events[i].returnValues.targetAddress,Web3.utils.fromWei(events[i].returnValues.totalEth,\"ether\"),Web3.utils.fromWei(events[i].returnValues.amtPerAddress,\"ether\"),Web3.utils.fromWei(events[i].returnValues.minRedeemAmt,\"ether\"),Web3.utils.fromWei(events[i].returnValues.maxRedeemAmt,\"ether\"),new Date(events[i].returnValues.startDate*1000),new Date(events[i].returnValues.endDate*1000)]);\n            }\n            resolve(codeArray);            \n          }\n          })\n        .then(function(events){\n        });\n    });\n}\n\nexport function getPromotionForCouponHash(contractInstance,hash){\n  return new Promise(function(resolve, reject) {\n      var codeArray = [];\n      contractInstance.getPastEvents('Promotion', {\n          filter: {couponHash:hash}, // Using an array means OR: e.g. 20 or 23\n          fromBlock: 0,\n          toBlock: 'latest'\n      }, function(error, events){\n        console.log(events);\n        if(events.length > 0){\n          // console.log(events[0].returnValues); \n          // for(var i=0;i<events.length;i++){\n            codeArray.push(events[0].returnValues);\n          // }\n          resolve(codeArray);            \n        }\n        })\n      .then(function(events){\n      });\n  });\n}\n\n\nexport function getRedeem(contractInstance,account){\n    return new Promise(function(resolve, reject) {\n        var codeArray = [];\n        contractInstance.getPastEvents('Redeem', {\n            filter: {user:account}, // Using an array means OR: e.g. 20 or 23\n            fromBlock: 0,\n            toBlock: 'latest'\n        }, function(error, events){\n          console.log(events);\n          if(events.length > 0){\n            // console.log(events[0].returnValues);\n            for(var i=0;i<events.length;i++){\n              codeArray.push(events[i].returnValues);\n            } \n            resolve(codeArray);            \n          }\n          })\n        .then(function(events){\n        });\n    });\n}\n\nexport async function getRedeemCouponInfo(contractInstance,account){\n    // return new Promise(function(resolve, reject) {\n\n      var redeems = await getRedeem(contractInstance,account);\n      for(var i=0;i<redeems.length;i++){\n        var couponInfo = await getPromotionForCouponHash(contractInstance,redeems[i][0]);\n        // append promotion code,target account, starting date, ending date, amount redemmed, min coupon txn amount and max coupon txn amount\n        console.log(couponInfo)\n        if(couponInfo.length > 0){\n          redeems[i][\"couponCode\"] = couponInfo[0].couponCode;\n          redeems[i][\"startDate\"] = couponInfo[0].startDate;\n          redeems[i][\"endDate\"] = couponInfo[0].endDate;\n          redeems[i][\"endDate\"] = couponInfo[0].endDate;\n          redeems[i][\"amtPerAddress\"] = couponInfo[0].amtPerAddress;\n          redeems[i][\"minRedeemAmt\"] = couponInfo[0].minRedeemAmt;\n          redeems[i][\"maxRedeemAmt\"] = couponInfo[0].maxRedeemAmt;\n          redeems[i][\"targetAddress\"] = couponInfo[0].targetAddress;\n        }\n      }\n      return redeems;\n}\n\nexport function GetPromotionBalance(contractInstance,account,promoCode){\n   return new Promise(function(resolve, reject) {\n    // var details = await contractInstance.checkPromotionalBalance.call(promoCode,{from: account});\n    // console.log(details);\n    // // return resolve(details);\n    // return details;\n    contractInstance.methods.checkPromotionalBalance(promoCode).call({from: account})\n    .then(function(result){\n        console.log(result);\n        return(resolve(result));\n    });\n   });\n\n}\n\nexport function GetCouponBalance(contractInstance,account,promoCode){\n  return new Promise(function(resolve, reject) {\n   // var details = await contractInstance.checkPromotionalBalance.call(promoCode,{from: account});\n   // console.log(details);\n   // // return resolve(details);\n   // return details;\n   contractInstance.methods.checkCouponBalance(promoCode).call({from: account})\n   .then(function(result){\n       console.log(result);\n       return(resolve(result));\n   });\n  });\n\n}\n\nexport async function getPromotionWithBalances(contractInstance,account){\n    var promoList = await getPromotion(contractInstance,account);\n    for(var i=0;i<promoList.length;i++){\n      console.log(\"Promotion code is \" + promoList[i][\"couponCode\"]);\n      var res = await GetPromotionBalance(contractInstance,account,promoList[i][\"couponCode\"]);\n      // append promotion code,target account, starting date, ending date, amount redemmed, min coupon txn amount and max coupon txn amount\n      console.log(\"Coupon \" + promoList[i][\"couponCode\"] + \" still has \" + res.leftOver);\n      // if(res.length > 0){\n        promoList[i][\"Balance\"] = res.leftOver;\n        promoList[i][\"unspentEther\"] = res.unspentEther;\n      // }\n      \n    }\n    return promoList;\n}\n\nexport async function getCouponWithBalance(contractInstance,account){\n  var couponList = await getRedeemCouponInfo(contractInstance,account);\n  for(var i=0;i<couponList.length;i++){\n    console.log(\"Coupon code is \" + couponList[i][\"couponCode\"]);\n    var res = await GetCouponBalance(contractInstance,account,couponList[i][\"couponCode\"]);\n    // append promotion code,target account, starting date, ending date, amount redemmed, min coupon txn amount and max coupon txn amount\n    console.log(\"Coupon \" + couponList[i][\"couponCode\"] + \" still has \" + res);\n    // if(res.length > 0){\n    couponList[i][\"Balance\"] = res;\n    console.log(couponList);\n    // }    \n  }\n  return couponList;\n}\n\n","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/table.js",["67","68","69","70","71","72","73","74","75","76","77","78","79"],"import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport Web3 from 'web3'\nimport {ADDRESS, ABI} from './ABI'\nimport { Modal, Button } from \"react-bootstrap\";\nimport {hello,getPromotion,getPromotionWithBalances} from './helper';\n\nclass Table1 extends React.Component  {\n\n    componentDidMount() {\n        this.loadBlockchainData();\n        this.TopUpFunds = this.TopUpFunds.bind(this);\n        this.reclaimEthers = this.reclaimEthers.bind(this);\n        this.showTopUpModal = this.showTopUpModal.bind(this);\n        this.toStoreAmount = this.toStoreAmount.bind(this);\n      }\n\n      toStoreAmount(event){\n        this.setState({amount: event.target.value});\n        console.log(event.target.value);\n      }\n\n      showTopUpModal(e){\n        // event.preventDefault();\n        // alert(\"hello \" + event.target.value);\n        e.preventDefault();\n        var promoCodeValue = e.currentTarget.value;\n        this.setState({promoCode: promoCodeValue});\n        this.open();\n        //console.log(e.currentTarget.value);\n        \n      }\n\n      async loadBlockchainData() {\n        const web3 = new Web3(Web3.givenProvider);\n        const chainId = await web3.eth.getChainId();\n        console.log(chainId);\n        this.setState({accountInfo: ''});\n        var contractInstance = new web3.eth.Contract(ABI, ADDRESS);\n        const accounts = await web3.eth.getAccounts();\n        // await GetAllPromoCodes(contractInstance);\n    \n        var that = this;\n        var codeArray = [];\n        var promoOrigin = [];\n        var promo = [];\n        var promoDate = [];\n        var PromotionLimit = [];\n    \n        promo = await getPromotionWithBalances(contractInstance,accounts[0]);\n        console.log(promo);\n        this.setState({testData:promo});\n        console.log(\"from Home\");\n        console.log(this.state.testData);\n    \n      }\n\n    constructor(props) {\n        super(props);\n        this.state = {testData: '',promoCode: ''};\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        // console.log(\"list data is \" + JSON.stringify(this.props.testData));\n      }\n\n      open() {\n        this.setState({showModal: true});\n      }\n      \n      close() {\n        this.setState({showModal: false});\n      }\n\n      async TopUpFunds(){\n        const web3 = new Web3(Web3.givenProvider);\n        const accounts = await web3.eth.getAccounts();\n        var contractInstance = new web3.eth.Contract(ABI, ADDRESS);\n        var weiValue = web3.utils.toWei(this.state.amount.toString(),'ether');\n\n        var that = this;\n\n        contractInstance.methods.topUp(this.state.promoCode).send({from: accounts[0], value: weiValue})\n        .on(\"receipt\",function(hash){\n          alert('Promotion top up success');\n          that.close();\n          window.location.reload(true);\n        })\n        .on(\"error\", function(error){\n          alert(error);\n        });\n\n      }\n\n    async reclaimEthers(e){\n        e.preventDefault();\n        var promoCode = e.currentTarget.value;\n\n        const web3 = new Web3(Web3.givenProvider);\n        const accounts = await web3.eth.getAccounts();\n        var contractInstance = new web3.eth.Contract(ABI, ADDRESS);\n        // var weiValue = web3.utils.toWei(this.state.amount.toString(),'ether');\n\n        var that = this;\n\n\n        contractInstance.methods.collectLeftoverEther(promoCode).send({from: accounts[0]})\n        .on(\"receipt\",function(receipt){\n          console.log(receipt);\n          alert(web3.utils.fromWei(receipt.events.CollectLeftOver.returnValues.amount,\"ether\") + ' unspent remaining Ether reclaimed by user');\n          that.close();\n          window.location.reload(true);\n        })\n        .on(\"error\", function(error){\n          console.log(error);\n          alert(error);\n        });\n      }\n\n\n    render(){\n        const tableHeader = this.props.header;\n        var listData = this.state.testData;\n        return (\n            <>\n            <table class=\"table table-striped\">\n              <thead>\n                <tr>\n                {tableHeader.map((header) => <th>{header}</th>)}\n                </tr>\n              </thead>\n              <tbody>\n                {(() => {\n                  {console.log(\"List data is \")}\n                              {console.log(listData)}\n                    const rows = [];\n                    for (let i = 0; i < listData.length; i++) {\n                    // For promotions sponsored, only show active and expired promotions if unclaimed\n                    if(!(new Date() > new Date(listData[i].endDate * 1000) && (Web3.utils.fromWei(Web3.utils.toBN(listData[i].Balance),\"ether\") == 0))){\n                      rows.push(<tr>\n                        <td> {(() => {\n                          if(new Date() > new Date(listData[i].endDate * 1000)){\n                            return <><button type=\"button\" class=\"btn\" title=\"Reclaim unspent Ethers\" value={listData[i].couponCode} onClick={this.reclaimEthers}><i class=\"fa fa-times\"></i></button></>\n                          }\n                          else{\n                            return <><button type=\"button\" class=\"btn\" title=\"Top up promotion\" value={listData[i].couponCode} onClick={this.showTopUpModal}><i class=\"fa fa-credit-card\"></i></button></>\n                          }\n                          })()}</td>\n                        {/* <td><button type=\"button\" class=\"btn\" title=\"top up promotion\" value={listData[i].couponCode} onClick={this.showTopUpModal}><i class=\"fa fa-credit-card\"></i></button></td> */}\n                        <td>{listData[i].couponCode}</td>\n                        <td>{new Date(listData[i].dateCreated * 1000).toLocaleString()}</td>\n                        <td>{listData[i].targetAddress}</td>\n                        <td>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].totalEth),\"ether\")}</td>\n                        {/* <td>{listData[i].unspentEther}</td> */}\n                        <td><b>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].Balance),\"ether\")}</b></td>\n                        <td>{new Date(listData[i].startDate*1000).toLocaleString()}</td>\n                        <td>{new Date(listData[i].endDate*1000).toLocaleString()}</td>\n                        <td>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].amtPerAddress),\"ether\")}</td>\n                        <td>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].minRedeemAmt),\"ether\")}</td>\n                        <td>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].maxRedeemAmt),\"ether\")}</td>\n                        </tr>);\n                      } \n                    }\n                    return rows;\n                })()\n                }\n              </tbody>\n            </table>\n            {/* {JSON.stringify(listData)} */}\n\n            <Modal className=\"modalTopUp\" \n          show={this.state.showModal} \n          onHide={this.close}\n          animation={true} \n      bsSize=\"small\">\n\n                      <Modal.Header closeButton>\n      <Modal.Title>Top Up Promotion Funds</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n          <table>\n                    <tr style={{ height: '45px' }}>\n                      <td style={{ width: '200px' }}>Promotion code:</td>\n                      <td><input type=\"text\" class=\"form-control\" name=\"txtPromoCode\" value={this.state.promoCode} onChange={this.toStorePromoCode} disabled/></td>\n                    </tr>\n                    <tr style={{ height: '45px' }}>\n                      <td>Amount top up(eth):</td>\n                      <td><input type=\"text\" class=\"form-control\" name=\"txtAmt\" value={this.state.amount} onChange={this.toStoreAmount} /></td>\n                    </tr>\n                  </table>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <button type=\"button\" class=\"btn btn-success\" onClick={this.TopUpFunds} id=\"btn_TopUp\">Top Up Promotion Funds</button>\n            <button type=\"button\" class=\"btn btn-danger\" onClick={this.close}>Close</button>\n          </Modal.Footer>         \n        </Modal> \n\n          </>\n        );\n    }\n}\n\nexport default Table1;","/Volumes/Data/BlockchainCourse/FrontEnd/ethcoupon-finalproject-react/src/RedeemTable.js",["80","81","82","83","84","85","86","87","88","89","90","91","92"],"import React, { Component } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport Web3 from 'web3'\nimport {ADDRESS, ABI} from './ABI'\nimport {hello,getPromotion,getRedeemCouponInfo,getCouponWithBalance} from './helper';\nimport { Modal, Button } from \"react-bootstrap\";\n\nclass RedeemTable extends React.Component  {\n\n    componentDidMount() {\n        this.loadBlockchainData();\n        this.toStoreCouponAmt = this.toStoreCouponAmt.bind(this);\n        this.toStoreWalletAmt = this.toStoreWalletAmt.bind(this);\n        this.showTransactionModal = this.showTransactionModal.bind(this);\n        this.PerformTransaction = this.PerformTransaction.bind(this);\n      }\n\n      toStoreCouponAmt(event){\n        this.setState({couponAmt: event.target.value});\n        console.log(event.target.value);\n      }\n\n      toStoreWalletAmt(event){\n        this.setState({walletAmt: event.target.value});\n        console.log(event.target.value);\n      }\n\n      showTransactionModal(e){\n        // event.preventDefault();\n        // alert(\"hello \" + event.target.value);\n        e.preventDefault();\n        var promoCodeValue = e.currentTarget.value;\n        this.setState({promoCode: promoCodeValue});\n        this.open();\n        //console.log(e.currentTarget.value);\n        \n      }\n\n      async loadBlockchainData() {\n        const web3 = new Web3(Web3.givenProvider);\n        const chainId = await web3.eth.getChainId();\n        console.log(chainId);\n        this.setState({accountInfo: ''});\n        var contractInstance = new web3.eth.Contract(ABI, ADDRESS);\n        const accounts = await web3.eth.getAccounts();\n        // await GetAllPromoCodes(contractInstance);\n    \n        var that = this;\n        var codeArray = [];\n        var promoOrigin = [];\n        var promo = [];\n        var promoDate = [];\n        var PromotionLimit = [];\n    \n        promo = await getCouponWithBalance(contractInstance,accounts[0]);\n        console.log(\"Promo data is \");\n        console.log(promo);\n        this.setState({testData:promo});\n        console.log(\"from Home\");\n        console.log(this.state.testData);\n    \n      }\n\n    async PerformTransaction(){\n      const web3 = new Web3(Web3.givenProvider);\n      const accounts = await web3.eth.getAccounts();\n      var contractInstance = new web3.eth.Contract(ABI, ADDRESS);\n\n      // console.log(this.state);\n      var couponAmt = this.state.couponAmt;\n      var walletAmt = this.state.walletAmt;\n      console.log('state value is ' + couponAmt);\n      console.log('state value is ' + walletAmt);\n      var couponAmt = web3.utils.toWei(couponAmt,'ether');\n      var walletAmt = web3.utils.toWei(walletAmt,'ether');\n\n      contractInstance.methods.transaction(this.state.promoCode,couponAmt).send({from: accounts[0],value: walletAmt})\n      .on(\"receipt\",function(hash){\n          alert('Transaction success');\n          // $('#myModal').modal('hide');\n          window.location.reload(true);\n      })\n      .on(\"error\", function(error){\n          alert(error);\n      });\n    }\n\n    open() {\n      this.setState({showModal: true});\n    }\n    \n    close() {\n      this.setState({showModal: false});\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {testData: ''};\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        // console.log(\"list data is \" + JSON.stringify(this.props.testData));\n      }\n\n\n\n    render(){\n        const tableHeader = this.props.header;\n        var listData = this.state.testData;\n        return (\n            <>\n            <table class=\"table table-striped\">\n              <thead>\n                <tr>\n                {tableHeader.map((header) => <th>{header}</th>)}\n                </tr>\n              </thead>\n              <tbody>\n                {(() => {\n                    const rows = [];\n                    for (let i = 0; i < listData.length; i++) {\n                    // display only active coupons\n                    if(!(new Date() > new Date(listData[i].endDate * 1000))){\n                        rows.push(<tr>\n                          <td> {(() => {\n                            // Only allow transactions if the coupon balance is a non zero value\n                          if(Web3.utils.fromWei(Web3.utils.toBN(listData[i].Balance),\"ether\") > 0){\n                            return <><button type=\"button\" class=\"btn\" title=\"Spend coupon value\" value={listData[i].couponCode} onClick={this.showTransactionModal}><i class=\"fa fa-credit-card\"></i></button></>\n                          }\n                          })()}</td>\n                        {/* <td><button type=\"button\" class=\"btn\" title=\"Spend coupon value\" value={listData[i].couponCode} onClick={this.showTransactionModal}><i class=\"fa fa-credit-card\"></i></button></td> */}\n                        <td>{listData[i].couponCode}</td>\n                        <td>{new Date(listData[i].date * 1000).toLocaleString()}</td>\n                        <td>{listData[i].targetAddress}</td>\n                        {/* <td>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].totalEth),\"ether\")}</td> */}\n                        <td>{new Date(listData[i].startDate*1000).toLocaleString()}</td>\n                        <td>{new Date(listData[i].endDate*1000).toLocaleString()}</td>\n                        <td>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].amtPerAddress),\"ether\")}</td>\n                        <td><b>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].Balance),\"ether\")}</b></td>\n                        <td>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].minRedeemAmt),\"ether\")}</td>\n                        <td>{Web3.utils.fromWei(Web3.utils.toBN(listData[i].maxRedeemAmt),\"ether\")}</td>\n                        </tr>);\n                      }\n                    }\n                    return rows;\n                })()\n                }\n              </tbody>\n            </table>\n            {/* {JSON.stringify(listData)} */}\n\n            <Modal className=\"modalTransaction\" \n          show={this.state.showModal} \n          onHide={this.close}\n          animation={true} \n      bsSize=\"small\">\n\n            <Modal.Header closeButton>\n      <Modal.Title>Spend coupon value</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n          <table>\n                    <tr style={{ height: '45px' }}>\n                      <td style={{ width: '200px' }}>Promotion code:</td>\n                      <td><input type=\"text\" class=\"form-control\" name=\"txtPromoCode\" value={this.state.promoCode} onChange={this.toStorePromoCode} disabled/></td>\n                    </tr>\n                    <tr style={{ height: '45px' }}>\n                      <td>Coupon amount(eth):</td>\n                      <td><input type=\"text\" class=\"form-control\" name=\"txtCouponAmt\" value={this.state.couponAmt} onChange={this.toStoreCouponAmt} /></td>\n                    </tr>\n                    <tr style={{ height: '45px' }}>\n                      <td>Wallet amount(eth):</td>\n                      <td><input type=\"text\" class=\"form-control\" name=\"txtWalletAmt\" value={this.state.walletAmt} onChange={this.toStoreWalletAmt} /></td>\n                    </tr>\n                  </table>\n          </Modal.Body>\n          <Modal.Footer>\n            <button type=\"button\" class=\"btn btn-success\" onClick={this.PerformTransaction} id=\"btn_transaction\">Perform Transaction</button>\n            <button type=\"button\" class=\"btn btn-danger\" onClick={this.close}>Close</button>\n          </Modal.Footer>         \n        </Modal> \n\n          </>\n        );\n    }\n}\n\nexport default RedeemTable;",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"101","line":2,"column":8,"nodeType":"99","messageId":"100","endLine":2,"endColumn":12},{"ruleId":"97","severity":1,"message":"102","line":6,"column":17,"nodeType":"99","messageId":"100","endLine":6,"endColumn":23},{"ruleId":"97","severity":1,"message":"103","line":11,"column":3,"nodeType":"99","messageId":"100","endLine":11,"endColumn":9},{"ruleId":"97","severity":1,"message":"104","line":14,"column":3,"nodeType":"99","messageId":"100","endLine":14,"endColumn":9},{"ruleId":"97","severity":1,"message":"105","line":18,"column":9,"nodeType":"99","messageId":"100","endLine":18,"endColumn":14},{"ruleId":"97","severity":1,"message":"106","line":18,"column":28,"nodeType":"99","messageId":"100","endLine":18,"endColumn":52},{"ruleId":"97","severity":1,"message":"107","line":71,"column":9,"nodeType":"99","messageId":"100","endLine":71,"endColumn":13},{"ruleId":"97","severity":1,"message":"108","line":72,"column":9,"nodeType":"99","messageId":"100","endLine":72,"endColumn":18},{"ruleId":"97","severity":1,"message":"109","line":73,"column":9,"nodeType":"99","messageId":"100","endLine":73,"endColumn":20},{"ruleId":"97","severity":1,"message":"110","line":75,"column":9,"nodeType":"99","messageId":"100","endLine":75,"endColumn":18},{"ruleId":"97","severity":1,"message":"111","line":76,"column":9,"nodeType":"99","messageId":"100","endLine":76,"endColumn":23},{"ruleId":"97","severity":1,"message":"112","line":196,"column":9,"nodeType":"99","messageId":"100","endLine":196,"endColumn":25},{"ruleId":"97","severity":1,"message":"113","line":197,"column":11,"nodeType":"99","messageId":"100","endLine":197,"endColumn":19},{"ruleId":"114","severity":1,"message":"115","line":208,"column":16,"nodeType":"116","messageId":"117","endLine":208,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"101","line":2,"column":8,"nodeType":"99","messageId":"100","endLine":2,"endColumn":12},{"ruleId":"97","severity":1,"message":"118","line":5,"column":10,"nodeType":"99","messageId":"100","endLine":5,"endColumn":17},{"ruleId":"97","severity":1,"message":"105","line":11,"column":9,"nodeType":"99","messageId":"100","endLine":11,"endColumn":14},{"ruleId":"97","severity":1,"message":"119","line":11,"column":35,"nodeType":"99","messageId":"100","endLine":11,"endColumn":44},{"ruleId":"114","severity":1,"message":"115","line":31,"column":20,"nodeType":"116","messageId":"117","endLine":31,"endColumn":22},{"ruleId":"97","severity":1,"message":"107","line":43,"column":13,"nodeType":"99","messageId":"100","endLine":43,"endColumn":17},{"ruleId":"97","severity":1,"message":"120","line":1,"column":8,"nodeType":"99","messageId":"100","endLine":1,"endColumn":12},{"ruleId":"97","severity":1,"message":"98","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"101","line":2,"column":8,"nodeType":"99","messageId":"100","endLine":2,"endColumn":12},{"ruleId":"97","severity":1,"message":"102","line":6,"column":17,"nodeType":"99","messageId":"100","endLine":6,"endColumn":23},{"ruleId":"97","severity":1,"message":"105","line":7,"column":9,"nodeType":"99","messageId":"100","endLine":7,"endColumn":14},{"ruleId":"97","severity":1,"message":"121","line":7,"column":15,"nodeType":"99","messageId":"100","endLine":7,"endColumn":27},{"ruleId":"97","severity":1,"message":"107","line":44,"column":13,"nodeType":"99","messageId":"100","endLine":44,"endColumn":17},{"ruleId":"97","severity":1,"message":"108","line":45,"column":13,"nodeType":"99","messageId":"100","endLine":45,"endColumn":22},{"ruleId":"97","severity":1,"message":"109","line":46,"column":13,"nodeType":"99","messageId":"100","endLine":46,"endColumn":24},{"ruleId":"97","severity":1,"message":"110","line":48,"column":13,"nodeType":"99","messageId":"100","endLine":48,"endColumn":22},{"ruleId":"97","severity":1,"message":"111","line":49,"column":13,"nodeType":"99","messageId":"100","endLine":49,"endColumn":27},{"ruleId":"122","severity":1,"message":"123","line":134,"column":19,"nodeType":"124","messageId":"125","endLine":134,"endColumn":49},{"ruleId":"122","severity":1,"message":"123","line":135,"column":31,"nodeType":"124","messageId":"125","endLine":135,"endColumn":54},{"ruleId":"114","severity":1,"message":"126","line":139,"column":145,"nodeType":"116","messageId":"117","endLine":139,"endColumn":147},{"ruleId":"97","severity":1,"message":"98","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"101","line":2,"column":8,"nodeType":"99","messageId":"100","endLine":2,"endColumn":12},{"ruleId":"97","severity":1,"message":"105","line":6,"column":9,"nodeType":"99","messageId":"100","endLine":6,"endColumn":14},{"ruleId":"97","severity":1,"message":"121","line":6,"column":15,"nodeType":"99","messageId":"100","endLine":6,"endColumn":27},{"ruleId":"97","severity":1,"message":"127","line":6,"column":28,"nodeType":"99","messageId":"100","endLine":6,"endColumn":47},{"ruleId":"97","severity":1,"message":"102","line":7,"column":17,"nodeType":"99","messageId":"100","endLine":7,"endColumn":23},{"ruleId":"97","severity":1,"message":"107","line":49,"column":13,"nodeType":"99","messageId":"100","endLine":49,"endColumn":17},{"ruleId":"97","severity":1,"message":"108","line":50,"column":13,"nodeType":"99","messageId":"100","endLine":50,"endColumn":22},{"ruleId":"97","severity":1,"message":"109","line":51,"column":13,"nodeType":"99","messageId":"100","endLine":51,"endColumn":24},{"ruleId":"97","severity":1,"message":"110","line":53,"column":13,"nodeType":"99","messageId":"100","endLine":53,"endColumn":22},{"ruleId":"97","severity":1,"message":"111","line":54,"column":13,"nodeType":"99","messageId":"100","endLine":54,"endColumn":27},{"ruleId":"128","severity":1,"message":"129","line":75,"column":11,"nodeType":"99","messageId":"130","endLine":75,"endColumn":20},{"ruleId":"128","severity":1,"message":"131","line":76,"column":11,"nodeType":"99","messageId":"130","endLine":76,"endColumn":20},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'Button' is defined but never used.","'Switch' is defined but never used.","'Outlet' is defined but never used.","'hello' is defined but never used.","'getPromotionWithBalances' is defined but never used.","'that' is assigned a value but never used.","'codeArray' is assigned a value but never used.","'promoOrigin' is assigned a value but never used.","'promoDate' is assigned a value but never used.","'PromotionLimit' is assigned a value but never used.","'contractInstance' is assigned a value but never used.","'accounts' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'NavLink' is defined but never used.","'getRedeem' is defined but never used.","'Web3' is defined but never used.","'getPromotion' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Expected '===' and instead saw '=='.","'getRedeemCouponInfo' is defined but never used.","no-redeclare","'couponAmt' is already defined.","redeclared","'walletAmt' is already defined.","no-global-assign","no-unsafe-negation"]